/* tslint:disable */
/* eslint-disable */
/**
 * Playground API
 * API for the Playground.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * * `File System Activity` - FILE_SYSTEM_ACTIVITY * `Kernel Extension Activity` - KERNEL_EXTENSION_ACTIVITY * `Kernel Activity` - KERNEL_ACTIVITY * `Memory Activity` - MEMORY_ACTIVITY * `Module Activity` - MODULE_ACTIVITY * `Scheduled Job Activity` - SCHEDULED_JOB_ACTIVITY * `Process Activity` - PROCESS_ACTIVITY * `Account Change` - ACCOUNT_CHANGE * `Authentication` - AUTHENTICATION * `Authorize Session` - AUTHORIZE_SESSION * `Entity Management` - ENTITY_MANAGEMENT * `User Access Management` - USER_ACCESS_MANAGEMENT * `Group Management` - GROUP_MANAGEMENT * `Network Activity` - NETWORK_ACTIVITY * `HTTP Activity` - HTTP_ACTIVITY * `DNS Activity` - DNS_ACTIVITY * `DHCP Activity` - DHCP_ACTIVITY * `RDP Activity` - RDP_ACTIVITY * `SMB Activity` - SMB_ACTIVITY * `SSH Activity` - SSH_ACTIVITY * `FTP Activity` - FTP_ACTIVITY * `Email Activity` - EMAIL_ACTIVITY * `Network File Activity` - NETWORK_FILE_ACTIVITY * `Email File Activity` - EMAIL_FILE_ACTIVITY * `Email URL Activity` - EMAIL_URL_ACTIVITY * `NTP Activity` - NTP_ACTIVITY * `Device Inventory Info` - DEVICE_INVENTORY_INFO * `Device Config State` - DEVICE_CONFIG_STATE * `User Inventory Info` - USER_INVENTORY_INFO * `Operating System Patch State` - OPERATING_SYSTEM_PATCH_STATE * `Device Config State Change` - DEVICE_CONFIG_STATE_CHANGE * `Web Resources Activity` - WEB_RESOURCES_ACTIVITY * `Application Lifecycle` - APPLICATION_LIFECYCLE * `API Activity` - API_ACTIVITY * `Web Resource Access Activity` - WEB_RESOURCE_ACCESS_ACTIVITY * `Datastore Activity` - DATASTORE_ACTIVITY * `File Hosting Activity` - FILE_HOSTING_ACTIVITY * `Scan Activity` - SCAN_ACTIVITY
 * @export
 * @enum {string}
 */

export const OcsfCategoryEnum = {
    FileSystemActivity: 'File System Activity',
    KernelExtensionActivity: 'Kernel Extension Activity',
    KernelActivity: 'Kernel Activity',
    MemoryActivity: 'Memory Activity',
    ModuleActivity: 'Module Activity',
    ScheduledJobActivity: 'Scheduled Job Activity',
    ProcessActivity: 'Process Activity',
    AccountChange: 'Account Change',
    Authentication: 'Authentication',
    AuthorizeSession: 'Authorize Session',
    EntityManagement: 'Entity Management',
    UserAccessManagement: 'User Access Management',
    GroupManagement: 'Group Management',
    NetworkActivity: 'Network Activity',
    HttpActivity: 'HTTP Activity',
    DnsActivity: 'DNS Activity',
    DhcpActivity: 'DHCP Activity',
    RdpActivity: 'RDP Activity',
    SmbActivity: 'SMB Activity',
    SshActivity: 'SSH Activity',
    FtpActivity: 'FTP Activity',
    EmailActivity: 'Email Activity',
    NetworkFileActivity: 'Network File Activity',
    EmailFileActivity: 'Email File Activity',
    EmailUrlActivity: 'Email URL Activity',
    NtpActivity: 'NTP Activity',
    DeviceInventoryInfo: 'Device Inventory Info',
    DeviceConfigState: 'Device Config State',
    UserInventoryInfo: 'User Inventory Info',
    OperatingSystemPatchState: 'Operating System Patch State',
    DeviceConfigStateChange: 'Device Config State Change',
    WebResourcesActivity: 'Web Resources Activity',
    ApplicationLifecycle: 'Application Lifecycle',
    ApiActivity: 'API Activity',
    WebResourceAccessActivity: 'Web Resource Access Activity',
    DatastoreActivity: 'Datastore Activity',
    FileHostingActivity: 'File Hosting Activity',
    ScanActivity: 'Scan Activity'
} as const;

export type OcsfCategoryEnum = typeof OcsfCategoryEnum[keyof typeof OcsfCategoryEnum];


/**
 * * `1.1.0` - V1_1_0
 * @export
 * @enum {string}
 */

export const OcsfVersionEnum = {
    _110: '1.1.0'
} as const;

export type OcsfVersionEnum = typeof OcsfVersionEnum[keyof typeof OcsfVersionEnum];


/**
 * 
 * @export
 * @interface TransformerCategorizeV110Request
 */
export interface TransformerCategorizeV110Request {
    /**
     * 
     * @type {string}
     * @memberof TransformerCategorizeV110Request
     */
    'input_entry': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerCategorizeV110Request
     */
    'user_guidance'?: string;
}
/**
 * 
 * @export
 * @interface TransformerCategorizeV110Response
 */
export interface TransformerCategorizeV110Response {
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerCategorizeV110Response
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {OcsfVersionEnum}
     * @memberof TransformerCategorizeV110Response
     */
    'ocsf_version': OcsfVersionEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerCategorizeV110Response
     */
    'rationale': string;
}


/**
 * 
 * @export
 * @interface TransformerHeuristicCreateRequest
 */
export interface TransformerHeuristicCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateRequest
     */
    'input_entry': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateRequest
     */
    'existing_heuristic'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateRequest
     */
    'user_guidance'?: string;
}
/**
 * 
 * @export
 * @interface TransformerHeuristicCreateResponse
 */
export interface TransformerHeuristicCreateResponse {
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateResponse
     */
    'new_heuristic': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateResponse
     */
    'rationale': string;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve: async (format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchemaRetrieve(format, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiSchemaRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.apiSchemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {ApiSchemaRetrieveFormatEnum} [format] 
     * @param {ApiSchemaRetrieveLangEnum} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiSchemaRetrieve(format, lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApiSchemaRetrieveFormatEnum = {
    Json: 'json',
    Yaml: 'yaml'
} as const;
export type ApiSchemaRetrieveFormatEnum = typeof ApiSchemaRetrieveFormatEnum[keyof typeof ApiSchemaRetrieveFormatEnum];
/**
 * @export
 */
export const ApiSchemaRetrieveLangEnum = {
    Af: 'af',
    Ar: 'ar',
    ArDz: 'ar-dz',
    Ast: 'ast',
    Az: 'az',
    Be: 'be',
    Bg: 'bg',
    Bn: 'bn',
    Br: 'br',
    Bs: 'bs',
    Ca: 'ca',
    Ckb: 'ckb',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    Dsb: 'dsb',
    El: 'el',
    En: 'en',
    EnAu: 'en-au',
    EnGb: 'en-gb',
    Eo: 'eo',
    Es: 'es',
    EsAr: 'es-ar',
    EsCo: 'es-co',
    EsMx: 'es-mx',
    EsNi: 'es-ni',
    EsVe: 'es-ve',
    Et: 'et',
    Eu: 'eu',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Fy: 'fy',
    Ga: 'ga',
    Gd: 'gd',
    Gl: 'gl',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hsb: 'hsb',
    Hu: 'hu',
    Hy: 'hy',
    Ia: 'ia',
    Id: 'id',
    Ig: 'ig',
    Io: 'io',
    Is: 'is',
    It: 'it',
    Ja: 'ja',
    Ka: 'ka',
    Kab: 'kab',
    Kk: 'kk',
    Km: 'km',
    Kn: 'kn',
    Ko: 'ko',
    Ky: 'ky',
    Lb: 'lb',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mn: 'mn',
    Mr: 'mr',
    Ms: 'ms',
    My: 'my',
    Nb: 'nb',
    Ne: 'ne',
    Nl: 'nl',
    Nn: 'nn',
    Os: 'os',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    PtBr: 'pt-br',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sq: 'sq',
    Sr: 'sr',
    SrLatn: 'sr-latn',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Tg: 'tg',
    Th: 'th',
    Tk: 'tk',
    Tr: 'tr',
    Tt: 'tt',
    Udm: 'udm',
    Ug: 'ug',
    Uk: 'uk',
    Ur: 'ur',
    Uz: 'uz',
    Vi: 'vi',
    ZhHans: 'zh-hans',
    ZhHant: 'zh-hant'
} as const;
export type ApiSchemaRetrieveLangEnum = typeof ApiSchemaRetrieveLangEnum[keyof typeof ApiSchemaRetrieveLangEnum];


/**
 * TransformerApi - axios parameter creator
 * @export
 */
export const TransformerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TransformerCategorizeV110Request} transformerCategorizeV110Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerCategorizeV110Create: async (transformerCategorizeV110Request: TransformerCategorizeV110Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformerCategorizeV110Request' is not null or undefined
            assertParamExists('transformerCategorizeV110Create', 'transformerCategorizeV110Request', transformerCategorizeV110Request)
            const localVarPath = `/transformer/categorize/v1_1_0/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformerCategorizeV110Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransformerHeuristicCreateRequest} transformerHeuristicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerHeuristicCreateCreate: async (transformerHeuristicCreateRequest: TransformerHeuristicCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformerHeuristicCreateRequest' is not null or undefined
            assertParamExists('transformerHeuristicCreateCreate', 'transformerHeuristicCreateRequest', transformerHeuristicCreateRequest)
            const localVarPath = `/transformer/heuristic/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformerHeuristicCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransformerApi - functional programming interface
 * @export
 */
export const TransformerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransformerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TransformerCategorizeV110Request} transformerCategorizeV110Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformerCategorizeV110Create(transformerCategorizeV110Request: TransformerCategorizeV110Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformerCategorizeV110Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformerCategorizeV110Create(transformerCategorizeV110Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransformerApi.transformerCategorizeV110Create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TransformerHeuristicCreateRequest} transformerHeuristicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformerHeuristicCreateCreate(transformerHeuristicCreateRequest: TransformerHeuristicCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformerHeuristicCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformerHeuristicCreateCreate(transformerHeuristicCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransformerApi.transformerHeuristicCreateCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransformerApi - factory interface
 * @export
 */
export const TransformerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransformerApiFp(configuration)
    return {
        /**
         * 
         * @param {TransformerCategorizeV110Request} transformerCategorizeV110Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerCategorizeV110Create(transformerCategorizeV110Request: TransformerCategorizeV110Request, options?: RawAxiosRequestConfig): AxiosPromise<TransformerCategorizeV110Response> {
            return localVarFp.transformerCategorizeV110Create(transformerCategorizeV110Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransformerHeuristicCreateRequest} transformerHeuristicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerHeuristicCreateCreate(transformerHeuristicCreateRequest: TransformerHeuristicCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransformerHeuristicCreateResponse> {
            return localVarFp.transformerHeuristicCreateCreate(transformerHeuristicCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransformerApi - object-oriented interface
 * @export
 * @class TransformerApi
 * @extends {BaseAPI}
 */
export class TransformerApi extends BaseAPI {
    /**
     * 
     * @param {TransformerCategorizeV110Request} transformerCategorizeV110Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformerApi
     */
    public transformerCategorizeV110Create(transformerCategorizeV110Request: TransformerCategorizeV110Request, options?: RawAxiosRequestConfig) {
        return TransformerApiFp(this.configuration).transformerCategorizeV110Create(transformerCategorizeV110Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransformerHeuristicCreateRequest} transformerHeuristicCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformerApi
     */
    public transformerHeuristicCreateCreate(transformerHeuristicCreateRequest: TransformerHeuristicCreateRequest, options?: RawAxiosRequestConfig) {
        return TransformerApiFp(this.configuration).transformerHeuristicCreateCreate(transformerHeuristicCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



