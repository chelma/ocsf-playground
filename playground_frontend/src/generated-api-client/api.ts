/* tslint:disable */
/* eslint-disable */
/**
 * Playground API
 * API for the Playground.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * * `File System Activity (1001)` - FILE_SYSTEM_ACTIVITY_1001 * `Kernel Extension Activity (1002)` - KERNEL_EXTENSION_ACTIVITY_1002 * `Kernel Activity (1003)` - KERNEL_ACTIVITY_1003 * `Memory Activity (1004)` - MEMORY_ACTIVITY_1004 * `Module Activity (1005)` - MODULE_ACTIVITY_1005 * `Scheduled Job Activity (1006)` - SCHEDULED_JOB_ACTIVITY_1006 * `Process Activity (1007)` - PROCESS_ACTIVITY_1007 * `Vulnerability Finding (2002)` - VULNERABILITY_FINDING_2002 * `Compliance Finding (2003)` - COMPLIANCE_FINDING_2003 * `Detection Finding (2004)` - DETECTION_FINDING_2004 * `Incident Finding (2005)` - INCIDENT_FINDING_2005 * `Account Change (3001)` - ACCOUNT_CHANGE_3001 * `Authentication (3002)` - AUTHENTICATION_3002 * `Authorize Session (3003)` - AUTHORIZE_SESSION_3003 * `Entity Management (3004)` - ENTITY_MANAGEMENT_3004 * `User Access Management (3005)` - USER_ACCESS_MANAGEMENT_3005 * `Group Management (3006)` - GROUP_MANAGEMENT_3006 * `Network Activity (4001)` - NETWORK_ACTIVITY_4001 * `HTTP Activity (4002)` - HTTP_ACTIVITY_4002 * `DNS Activity (4003)` - DNS_ACTIVITY_4003 * `DHCP Activity (4004)` - DHCP_ACTIVITY_4004 * `RDP Activity (4005)` - RDP_ACTIVITY_4005 * `SMB Activity (4006)` - SMB_ACTIVITY_4006 * `SSH Activity (4007)` - SSH_ACTIVITY_4007 * `FTP Activity (4008)` - FTP_ACTIVITY_4008 * `Email Activity (4009)` - EMAIL_ACTIVITY_4009 * `Network File Activity (4010)` - NETWORK_FILE_ACTIVITY_4010 * `Email File Activity (4011)` - EMAIL_FILE_ACTIVITY_4011 * `Email URL Activity (4012)` - EMAIL_URL_ACTIVITY_4012 * `NTP Activity (4013)` - NTP_ACTIVITY_4013 * `Device Inventory Info (5001)` - DEVICE_INVENTORY_INFO_5001 * `Device Config State (5002)` - DEVICE_CONFIG_STATE_5002 * `User Inventory Info (5003)` - USER_INVENTORY_INFO_5003 * `Operating System Patch State (5004)` - OPERATING_SYSTEM_PATCH_STATE_5004 * `Device Config State Change (5019)` - DEVICE_CONFIG_STATE_CHANGE_5019 * `Web Resources Activity (6001)` - WEB_RESOURCES_ACTIVITY_6001 * `Application Lifecycle (6002)` - APPLICATION_LIFECYCLE_6002 * `API Activity (6003)` - API_ACTIVITY_6003 * `Web Resource Access Activity (6004)` - WEB_RESOURCE_ACCESS_ACTIVITY_6004 * `Datastore Activity (6005)` - DATASTORE_ACTIVITY_6005 * `File Hosting Activity (6006)` - FILE_HOSTING_ACTIVITY_6006 * `Scan Activity (6007)` - SCAN_ACTIVITY_6007
 * @export
 * @enum {string}
 */

export const OcsfCategoryEnum = {
    FileSystemActivity1001: 'File System Activity (1001)',
    KernelExtensionActivity1002: 'Kernel Extension Activity (1002)',
    KernelActivity1003: 'Kernel Activity (1003)',
    MemoryActivity1004: 'Memory Activity (1004)',
    ModuleActivity1005: 'Module Activity (1005)',
    ScheduledJobActivity1006: 'Scheduled Job Activity (1006)',
    ProcessActivity1007: 'Process Activity (1007)',
    VulnerabilityFinding2002: 'Vulnerability Finding (2002)',
    ComplianceFinding2003: 'Compliance Finding (2003)',
    DetectionFinding2004: 'Detection Finding (2004)',
    IncidentFinding2005: 'Incident Finding (2005)',
    AccountChange3001: 'Account Change (3001)',
    Authentication3002: 'Authentication (3002)',
    AuthorizeSession3003: 'Authorize Session (3003)',
    EntityManagement3004: 'Entity Management (3004)',
    UserAccessManagement3005: 'User Access Management (3005)',
    GroupManagement3006: 'Group Management (3006)',
    NetworkActivity4001: 'Network Activity (4001)',
    HttpActivity4002: 'HTTP Activity (4002)',
    DnsActivity4003: 'DNS Activity (4003)',
    DhcpActivity4004: 'DHCP Activity (4004)',
    RdpActivity4005: 'RDP Activity (4005)',
    SmbActivity4006: 'SMB Activity (4006)',
    SshActivity4007: 'SSH Activity (4007)',
    FtpActivity4008: 'FTP Activity (4008)',
    EmailActivity4009: 'Email Activity (4009)',
    NetworkFileActivity4010: 'Network File Activity (4010)',
    EmailFileActivity4011: 'Email File Activity (4011)',
    EmailUrlActivity4012: 'Email URL Activity (4012)',
    NtpActivity4013: 'NTP Activity (4013)',
    DeviceInventoryInfo5001: 'Device Inventory Info (5001)',
    DeviceConfigState5002: 'Device Config State (5002)',
    UserInventoryInfo5003: 'User Inventory Info (5003)',
    OperatingSystemPatchState5004: 'Operating System Patch State (5004)',
    DeviceConfigStateChange5019: 'Device Config State Change (5019)',
    WebResourcesActivity6001: 'Web Resources Activity (6001)',
    ApplicationLifecycle6002: 'Application Lifecycle (6002)',
    ApiActivity6003: 'API Activity (6003)',
    WebResourceAccessActivity6004: 'Web Resource Access Activity (6004)',
    DatastoreActivity6005: 'Datastore Activity (6005)',
    FileHostingActivity6006: 'File Hosting Activity (6006)',
    ScanActivity6007: 'Scan Activity (6007)'
} as const;

export type OcsfCategoryEnum = typeof OcsfCategoryEnum[keyof typeof OcsfCategoryEnum];


/**
 * * `1.1.0` - V1_1_0
 * @export
 * @enum {string}
 */

export const OcsfVersionEnum = {
    _110: '1.1.0'
} as const;

export type OcsfVersionEnum = typeof OcsfVersionEnum[keyof typeof OcsfVersionEnum];


/**
 * * `Python` - PYTHON
 * @export
 * @enum {string}
 */

export const TransformLanguageEnum = {
    Python: 'Python'
} as const;

export type TransformLanguageEnum = typeof TransformLanguageEnum[keyof typeof TransformLanguageEnum];


/**
 * 
 * @export
 * @interface TransformerCategorizeV110Request
 */
export interface TransformerCategorizeV110Request {
    /**
     * 
     * @type {string}
     * @memberof TransformerCategorizeV110Request
     */
    'input_entry': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerCategorizeV110Request
     */
    'user_guidance'?: string;
}
/**
 * 
 * @export
 * @interface TransformerCategorizeV110Response
 */
export interface TransformerCategorizeV110Response {
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerCategorizeV110Response
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {OcsfVersionEnum}
     * @memberof TransformerCategorizeV110Response
     */
    'ocsf_version': OcsfVersionEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerCategorizeV110Response
     */
    'rationale': string;
}


/**
 * 
 * @export
 * @interface TransformerEntitiesV110AnalyzeRequest
 */
export interface TransformerEntitiesV110AnalyzeRequest {
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerEntitiesV110AnalyzeRequest
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeRequest
     */
    'input_entry': string;
}


/**
 * 
 * @export
 * @interface TransformerEntitiesV110AnalyzeResponse
 */
export interface TransformerEntitiesV110AnalyzeResponse {
    /**
     * 
     * @type {OcsfVersionEnum}
     * @memberof TransformerEntitiesV110AnalyzeResponse
     */
    'ocsf_version': OcsfVersionEnum;
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerEntitiesV110AnalyzeResponse
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeResponse
     */
    'input_entry': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeResponse
     */
    'data_type': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeResponse
     */
    'type_rationale': string;
    /**
     * 
     * @type {Array<TransformerEntitiesV110AnalyzeResponseMappingsInner>}
     * @memberof TransformerEntitiesV110AnalyzeResponse
     */
    'mappings': Array<TransformerEntitiesV110AnalyzeResponseMappingsInner>;
}


/**
 * 
 * @export
 * @interface TransformerEntitiesV110AnalyzeResponseMappingsInner
 */
export interface TransformerEntitiesV110AnalyzeResponseMappingsInner {
    /**
     * Unique identifier for the entity mapping
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeResponseMappingsInner
     */
    'id': string;
    /**
     * List of entities associated with this mapping
     * @type {Array<TransformerEntitiesV110AnalyzeResponseMappingsInnerEntitiesInner>}
     * @memberof TransformerEntitiesV110AnalyzeResponseMappingsInner
     */
    'entities'?: Array<TransformerEntitiesV110AnalyzeResponseMappingsInnerEntitiesInner>;
    /**
     * Period-delimited path in OCSF schema (e.g., \'http_request.url.port\')
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeResponseMappingsInner
     */
    'ocsf_path': string;
    /**
     * A precise explanation of why the entity was mapped to the OCSF path
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeResponseMappingsInner
     */
    'path_rationale'?: string;
}
/**
 * 
 * @export
 * @interface TransformerEntitiesV110AnalyzeResponseMappingsInnerEntitiesInner
 */
export interface TransformerEntitiesV110AnalyzeResponseMappingsInnerEntitiesInner {
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeResponseMappingsInnerEntitiesInner
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110AnalyzeResponseMappingsInnerEntitiesInner
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface TransformerEntitiesV110ExtractRequest
 */
export interface TransformerEntitiesV110ExtractRequest {
    /**
     * 
     * @type {TransformLanguageEnum}
     * @memberof TransformerEntitiesV110ExtractRequest
     */
    'transform_language': TransformLanguageEnum;
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerEntitiesV110ExtractRequest
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractRequest
     */
    'input_entry': string;
    /**
     * 
     * @type {Array<TransformerEntitiesV110AnalyzeResponseMappingsInner>}
     * @memberof TransformerEntitiesV110ExtractRequest
     */
    'mappings': Array<TransformerEntitiesV110AnalyzeResponseMappingsInner>;
}


/**
 * 
 * @export
 * @interface TransformerEntitiesV110ExtractResponse
 */
export interface TransformerEntitiesV110ExtractResponse {
    /**
     * 
     * @type {TransformLanguageEnum}
     * @memberof TransformerEntitiesV110ExtractResponse
     */
    'transform_language': TransformLanguageEnum;
    /**
     * 
     * @type {OcsfVersionEnum}
     * @memberof TransformerEntitiesV110ExtractResponse
     */
    'ocsf_version': OcsfVersionEnum;
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerEntitiesV110ExtractResponse
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponse
     */
    'input_entry': string;
    /**
     * 
     * @type {Array<TransformerEntitiesV110ExtractResponsePatternsInner>}
     * @memberof TransformerEntitiesV110ExtractResponse
     */
    'patterns': Array<TransformerEntitiesV110ExtractResponsePatternsInner>;
}


/**
 * 
 * @export
 * @interface TransformerEntitiesV110ExtractResponsePatternsInner
 */
export interface TransformerEntitiesV110ExtractResponsePatternsInner {
    /**
     * Unique identifier for the extraction pattern
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInner
     */
    'id': string;
    /**
     * 
     * @type {TransformerEntitiesV110ExtractResponsePatternsInnerMapping}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInner
     */
    'mapping'?: TransformerEntitiesV110ExtractResponsePatternsInnerMapping;
    /**
     * The logic to set up any dependencies for the extraction/transformation logic, such as package import statements
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInner
     */
    'dependency_setup'?: string;
    /**
     * The extraction logic for the entity mapping, such a some Python or Javascript code
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInner
     */
    'extract_logic': string;
    /**
     * The transformation logic for the entity mapping, such a some Python or Javascript code
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInner
     */
    'transform_logic': string;
    /**
     * 
     * @type {TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInner
     */
    'validation_report'?: TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport;
}
/**
 * 
 * @export
 * @interface TransformerEntitiesV110ExtractResponsePatternsInnerMapping
 */
export interface TransformerEntitiesV110ExtractResponsePatternsInnerMapping {
    /**
     * Unique identifier for the entity mapping
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInnerMapping
     */
    'id': string;
    /**
     * List of entities associated with this mapping
     * @type {Array<TransformerEntitiesV110AnalyzeResponseMappingsInnerEntitiesInner>}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInnerMapping
     */
    'entities'?: Array<TransformerEntitiesV110AnalyzeResponseMappingsInnerEntitiesInner>;
    /**
     * Period-delimited path in OCSF schema (e.g., \'http_request.url.port\')
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInnerMapping
     */
    'ocsf_path': string;
    /**
     * A precise explanation of why the entity was mapped to the OCSF path
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInnerMapping
     */
    'path_rationale'?: string;
}
/**
 * Validation information for the extraction pattern
 * @export
 * @interface TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport
 */
export interface TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport {
    /**
     * Input data that was validated
     * @type {string}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport
     */
    'input': string;
    /**
     * Output data that was generated
     * @type {{ [key: string]: string; }}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport
     */
    'output': { [key: string]: string; };
    /**
     * List of validation messages or details
     * @type {Array<string>}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport
     */
    'report_entries': Array<string>;
    /**
     * Whether validation passed (true) or failed (false)
     * @type {boolean}
     * @memberof TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport
     */
    'passed': boolean;
}
/**
 * 
 * @export
 * @interface TransformerEntitiesV110TestRequest
 */
export interface TransformerEntitiesV110TestRequest {
    /**
     * 
     * @type {TransformLanguageEnum}
     * @memberof TransformerEntitiesV110TestRequest
     */
    'transform_language': TransformLanguageEnum;
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerEntitiesV110TestRequest
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110TestRequest
     */
    'input_entry': string;
    /**
     * 
     * @type {Array<TransformerEntitiesV110ExtractResponsePatternsInner>}
     * @memberof TransformerEntitiesV110TestRequest
     */
    'patterns': Array<TransformerEntitiesV110ExtractResponsePatternsInner>;
}


/**
 * 
 * @export
 * @interface TransformerEntitiesV110TestResponse
 */
export interface TransformerEntitiesV110TestResponse {
    /**
     * 
     * @type {TransformLanguageEnum}
     * @memberof TransformerEntitiesV110TestResponse
     */
    'transform_language': TransformLanguageEnum;
    /**
     * 
     * @type {OcsfVersionEnum}
     * @memberof TransformerEntitiesV110TestResponse
     */
    'ocsf_version': OcsfVersionEnum;
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerEntitiesV110TestResponse
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerEntitiesV110TestResponse
     */
    'input_entry': string;
    /**
     * 
     * @type {Array<TransformerEntitiesV110ExtractResponsePatternsInner>}
     * @memberof TransformerEntitiesV110TestResponse
     */
    'patterns': Array<TransformerEntitiesV110ExtractResponsePatternsInner>;
}


/**
 * 
 * @export
 * @interface TransformerHeuristicCreateRequest
 */
export interface TransformerHeuristicCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateRequest
     */
    'input_entry': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateRequest
     */
    'existing_heuristic'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateRequest
     */
    'user_guidance'?: string;
}
/**
 * 
 * @export
 * @interface TransformerHeuristicCreateResponse
 */
export interface TransformerHeuristicCreateResponse {
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateResponse
     */
    'new_heuristic': string;
    /**
     * 
     * @type {string}
     * @memberof TransformerHeuristicCreateResponse
     */
    'rationale': string;
}
/**
 * 
 * @export
 * @interface TransformerLogicV110CreateRequest
 */
export interface TransformerLogicV110CreateRequest {
    /**
     * 
     * @type {TransformLanguageEnum}
     * @memberof TransformerLogicV110CreateRequest
     */
    'transform_language': TransformLanguageEnum;
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerLogicV110CreateRequest
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformerLogicV110CreateRequest
     */
    'input_entry': string;
    /**
     * 
     * @type {Array<TransformerEntitiesV110ExtractResponsePatternsInner>}
     * @memberof TransformerLogicV110CreateRequest
     */
    'patterns': Array<TransformerEntitiesV110ExtractResponsePatternsInner>;
}


/**
 * 
 * @export
 * @interface TransformerLogicV110CreateResponse
 */
export interface TransformerLogicV110CreateResponse {
    /**
     * 
     * @type {TransformLanguageEnum}
     * @memberof TransformerLogicV110CreateResponse
     */
    'transform_language': TransformLanguageEnum;
    /**
     * 
     * @type {OcsfVersionEnum}
     * @memberof TransformerLogicV110CreateResponse
     */
    'ocsf_version': OcsfVersionEnum;
    /**
     * 
     * @type {OcsfCategoryEnum}
     * @memberof TransformerLogicV110CreateResponse
     */
    'ocsf_category': OcsfCategoryEnum;
    /**
     * 
     * @type {TransformerLogicV110CreateResponseTransformer}
     * @memberof TransformerLogicV110CreateResponse
     */
    'transformer': TransformerLogicV110CreateResponseTransformer;
}


/**
 * 
 * @export
 * @interface TransformerLogicV110CreateResponseTransformer
 */
export interface TransformerLogicV110CreateResponseTransformer {
    /**
     * Unique identifier for the transformer
     * @type {string}
     * @memberof TransformerLogicV110CreateResponseTransformer
     */
    'id': string;
    /**
     * The logic to set up any dependencies for the extraction/transformation logic, such as package import statements
     * @type {string}
     * @memberof TransformerLogicV110CreateResponseTransformer
     */
    'dependency_setup'?: string;
    /**
     * The transformation logic, such a some Python or Javascript code
     * @type {string}
     * @memberof TransformerLogicV110CreateResponseTransformer
     */
    'transformer_logic': string;
    /**
     * 
     * @type {TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport}
     * @memberof TransformerLogicV110CreateResponseTransformer
     */
    'validation_report'?: TransformerEntitiesV110ExtractResponsePatternsInnerValidationReport;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve: async (format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchemaRetrieve(format, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiSchemaRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.apiSchemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {ApiSchemaRetrieveFormatEnum} [format] 
     * @param {ApiSchemaRetrieveLangEnum} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiSchemaRetrieve(format, lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApiSchemaRetrieveFormatEnum = {
    Json: 'json',
    Yaml: 'yaml'
} as const;
export type ApiSchemaRetrieveFormatEnum = typeof ApiSchemaRetrieveFormatEnum[keyof typeof ApiSchemaRetrieveFormatEnum];
/**
 * @export
 */
export const ApiSchemaRetrieveLangEnum = {
    Af: 'af',
    Ar: 'ar',
    ArDz: 'ar-dz',
    Ast: 'ast',
    Az: 'az',
    Be: 'be',
    Bg: 'bg',
    Bn: 'bn',
    Br: 'br',
    Bs: 'bs',
    Ca: 'ca',
    Ckb: 'ckb',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    Dsb: 'dsb',
    El: 'el',
    En: 'en',
    EnAu: 'en-au',
    EnGb: 'en-gb',
    Eo: 'eo',
    Es: 'es',
    EsAr: 'es-ar',
    EsCo: 'es-co',
    EsMx: 'es-mx',
    EsNi: 'es-ni',
    EsVe: 'es-ve',
    Et: 'et',
    Eu: 'eu',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Fy: 'fy',
    Ga: 'ga',
    Gd: 'gd',
    Gl: 'gl',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hsb: 'hsb',
    Hu: 'hu',
    Hy: 'hy',
    Ia: 'ia',
    Id: 'id',
    Ig: 'ig',
    Io: 'io',
    Is: 'is',
    It: 'it',
    Ja: 'ja',
    Ka: 'ka',
    Kab: 'kab',
    Kk: 'kk',
    Km: 'km',
    Kn: 'kn',
    Ko: 'ko',
    Ky: 'ky',
    Lb: 'lb',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mn: 'mn',
    Mr: 'mr',
    Ms: 'ms',
    My: 'my',
    Nb: 'nb',
    Ne: 'ne',
    Nl: 'nl',
    Nn: 'nn',
    Os: 'os',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    PtBr: 'pt-br',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sq: 'sq',
    Sr: 'sr',
    SrLatn: 'sr-latn',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Tg: 'tg',
    Th: 'th',
    Tk: 'tk',
    Tr: 'tr',
    Tt: 'tt',
    Udm: 'udm',
    Ug: 'ug',
    Uk: 'uk',
    Ur: 'ur',
    Uz: 'uz',
    Vi: 'vi',
    ZhHans: 'zh-hans',
    ZhHant: 'zh-hant'
} as const;
export type ApiSchemaRetrieveLangEnum = typeof ApiSchemaRetrieveLangEnum[keyof typeof ApiSchemaRetrieveLangEnum];


/**
 * TransformerApi - axios parameter creator
 * @export
 */
export const TransformerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TransformerCategorizeV110Request} transformerCategorizeV110Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerCategorizeV110Create: async (transformerCategorizeV110Request: TransformerCategorizeV110Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformerCategorizeV110Request' is not null or undefined
            assertParamExists('transformerCategorizeV110Create', 'transformerCategorizeV110Request', transformerCategorizeV110Request)
            const localVarPath = `/transformer/categorize/v1_1_0/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformerCategorizeV110Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransformerEntitiesV110AnalyzeRequest} transformerEntitiesV110AnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerEntitiesV110AnalyzeCreate: async (transformerEntitiesV110AnalyzeRequest: TransformerEntitiesV110AnalyzeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformerEntitiesV110AnalyzeRequest' is not null or undefined
            assertParamExists('transformerEntitiesV110AnalyzeCreate', 'transformerEntitiesV110AnalyzeRequest', transformerEntitiesV110AnalyzeRequest)
            const localVarPath = `/transformer/entities/v1_1_0/analyze/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformerEntitiesV110AnalyzeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransformerEntitiesV110ExtractRequest} transformerEntitiesV110ExtractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerEntitiesV110ExtractCreate: async (transformerEntitiesV110ExtractRequest: TransformerEntitiesV110ExtractRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformerEntitiesV110ExtractRequest' is not null or undefined
            assertParamExists('transformerEntitiesV110ExtractCreate', 'transformerEntitiesV110ExtractRequest', transformerEntitiesV110ExtractRequest)
            const localVarPath = `/transformer/entities/v1_1_0/extract/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformerEntitiesV110ExtractRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransformerEntitiesV110TestRequest} transformerEntitiesV110TestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerEntitiesV110TestCreate: async (transformerEntitiesV110TestRequest: TransformerEntitiesV110TestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformerEntitiesV110TestRequest' is not null or undefined
            assertParamExists('transformerEntitiesV110TestCreate', 'transformerEntitiesV110TestRequest', transformerEntitiesV110TestRequest)
            const localVarPath = `/transformer/entities/v1_1_0/test/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformerEntitiesV110TestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransformerHeuristicCreateRequest} transformerHeuristicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerHeuristicCreateCreate: async (transformerHeuristicCreateRequest: TransformerHeuristicCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformerHeuristicCreateRequest' is not null or undefined
            assertParamExists('transformerHeuristicCreateCreate', 'transformerHeuristicCreateRequest', transformerHeuristicCreateRequest)
            const localVarPath = `/transformer/heuristic/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformerHeuristicCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransformerLogicV110CreateRequest} transformerLogicV110CreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerLogicV110CreateCreate: async (transformerLogicV110CreateRequest: TransformerLogicV110CreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformerLogicV110CreateRequest' is not null or undefined
            assertParamExists('transformerLogicV110CreateCreate', 'transformerLogicV110CreateRequest', transformerLogicV110CreateRequest)
            const localVarPath = `/transformer/logic/v1_1_0/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformerLogicV110CreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransformerApi - functional programming interface
 * @export
 */
export const TransformerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransformerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TransformerCategorizeV110Request} transformerCategorizeV110Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformerCategorizeV110Create(transformerCategorizeV110Request: TransformerCategorizeV110Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformerCategorizeV110Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformerCategorizeV110Create(transformerCategorizeV110Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransformerApi.transformerCategorizeV110Create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TransformerEntitiesV110AnalyzeRequest} transformerEntitiesV110AnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformerEntitiesV110AnalyzeCreate(transformerEntitiesV110AnalyzeRequest: TransformerEntitiesV110AnalyzeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformerEntitiesV110AnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformerEntitiesV110AnalyzeCreate(transformerEntitiesV110AnalyzeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransformerApi.transformerEntitiesV110AnalyzeCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TransformerEntitiesV110ExtractRequest} transformerEntitiesV110ExtractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformerEntitiesV110ExtractCreate(transformerEntitiesV110ExtractRequest: TransformerEntitiesV110ExtractRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformerEntitiesV110ExtractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformerEntitiesV110ExtractCreate(transformerEntitiesV110ExtractRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransformerApi.transformerEntitiesV110ExtractCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TransformerEntitiesV110TestRequest} transformerEntitiesV110TestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformerEntitiesV110TestCreate(transformerEntitiesV110TestRequest: TransformerEntitiesV110TestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformerEntitiesV110TestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformerEntitiesV110TestCreate(transformerEntitiesV110TestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransformerApi.transformerEntitiesV110TestCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TransformerHeuristicCreateRequest} transformerHeuristicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformerHeuristicCreateCreate(transformerHeuristicCreateRequest: TransformerHeuristicCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformerHeuristicCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformerHeuristicCreateCreate(transformerHeuristicCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransformerApi.transformerHeuristicCreateCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TransformerLogicV110CreateRequest} transformerLogicV110CreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformerLogicV110CreateCreate(transformerLogicV110CreateRequest: TransformerLogicV110CreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformerLogicV110CreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformerLogicV110CreateCreate(transformerLogicV110CreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransformerApi.transformerLogicV110CreateCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransformerApi - factory interface
 * @export
 */
export const TransformerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransformerApiFp(configuration)
    return {
        /**
         * 
         * @param {TransformerCategorizeV110Request} transformerCategorizeV110Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerCategorizeV110Create(transformerCategorizeV110Request: TransformerCategorizeV110Request, options?: RawAxiosRequestConfig): AxiosPromise<TransformerCategorizeV110Response> {
            return localVarFp.transformerCategorizeV110Create(transformerCategorizeV110Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransformerEntitiesV110AnalyzeRequest} transformerEntitiesV110AnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerEntitiesV110AnalyzeCreate(transformerEntitiesV110AnalyzeRequest: TransformerEntitiesV110AnalyzeRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransformerEntitiesV110AnalyzeResponse> {
            return localVarFp.transformerEntitiesV110AnalyzeCreate(transformerEntitiesV110AnalyzeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransformerEntitiesV110ExtractRequest} transformerEntitiesV110ExtractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerEntitiesV110ExtractCreate(transformerEntitiesV110ExtractRequest: TransformerEntitiesV110ExtractRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransformerEntitiesV110ExtractResponse> {
            return localVarFp.transformerEntitiesV110ExtractCreate(transformerEntitiesV110ExtractRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransformerEntitiesV110TestRequest} transformerEntitiesV110TestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerEntitiesV110TestCreate(transformerEntitiesV110TestRequest: TransformerEntitiesV110TestRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransformerEntitiesV110TestResponse> {
            return localVarFp.transformerEntitiesV110TestCreate(transformerEntitiesV110TestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransformerHeuristicCreateRequest} transformerHeuristicCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerHeuristicCreateCreate(transformerHeuristicCreateRequest: TransformerHeuristicCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransformerHeuristicCreateResponse> {
            return localVarFp.transformerHeuristicCreateCreate(transformerHeuristicCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransformerLogicV110CreateRequest} transformerLogicV110CreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformerLogicV110CreateCreate(transformerLogicV110CreateRequest: TransformerLogicV110CreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransformerLogicV110CreateResponse> {
            return localVarFp.transformerLogicV110CreateCreate(transformerLogicV110CreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransformerApi - object-oriented interface
 * @export
 * @class TransformerApi
 * @extends {BaseAPI}
 */
export class TransformerApi extends BaseAPI {
    /**
     * 
     * @param {TransformerCategorizeV110Request} transformerCategorizeV110Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformerApi
     */
    public transformerCategorizeV110Create(transformerCategorizeV110Request: TransformerCategorizeV110Request, options?: RawAxiosRequestConfig) {
        return TransformerApiFp(this.configuration).transformerCategorizeV110Create(transformerCategorizeV110Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransformerEntitiesV110AnalyzeRequest} transformerEntitiesV110AnalyzeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformerApi
     */
    public transformerEntitiesV110AnalyzeCreate(transformerEntitiesV110AnalyzeRequest: TransformerEntitiesV110AnalyzeRequest, options?: RawAxiosRequestConfig) {
        return TransformerApiFp(this.configuration).transformerEntitiesV110AnalyzeCreate(transformerEntitiesV110AnalyzeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransformerEntitiesV110ExtractRequest} transformerEntitiesV110ExtractRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformerApi
     */
    public transformerEntitiesV110ExtractCreate(transformerEntitiesV110ExtractRequest: TransformerEntitiesV110ExtractRequest, options?: RawAxiosRequestConfig) {
        return TransformerApiFp(this.configuration).transformerEntitiesV110ExtractCreate(transformerEntitiesV110ExtractRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransformerEntitiesV110TestRequest} transformerEntitiesV110TestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformerApi
     */
    public transformerEntitiesV110TestCreate(transformerEntitiesV110TestRequest: TransformerEntitiesV110TestRequest, options?: RawAxiosRequestConfig) {
        return TransformerApiFp(this.configuration).transformerEntitiesV110TestCreate(transformerEntitiesV110TestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransformerHeuristicCreateRequest} transformerHeuristicCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformerApi
     */
    public transformerHeuristicCreateCreate(transformerHeuristicCreateRequest: TransformerHeuristicCreateRequest, options?: RawAxiosRequestConfig) {
        return TransformerApiFp(this.configuration).transformerHeuristicCreateCreate(transformerHeuristicCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransformerLogicV110CreateRequest} transformerLogicV110CreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformerApi
     */
    public transformerLogicV110CreateCreate(transformerLogicV110CreateRequest: TransformerLogicV110CreateRequest, options?: RawAxiosRequestConfig) {
        return TransformerApiFp(this.configuration).transformerLogicV110CreateCreate(transformerLogicV110CreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



